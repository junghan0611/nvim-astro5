// Place your key bindings in this file to override the defaults
[
    // https://github.com/VSpaceCode/VSpaceCode/blob/master/src/configuration/keybindings.jsonc
    // Trigger vspacecode in empty editor group
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
	},

    // Trigger vspacecode when sidebar is in focus
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "sideBarFocus && !inputFocus && !whichkeyActive"
	},

    // Trigger vspacecode in notebook editors
    {
        "key": "space",
        "command": "vspacecode.space",
        "when": "notebookEditorFocused && !inputFocus && !whichkeyActive "
    },
    // Keybindings required for edamagit
    // https://github.com/kahole/edamagit#vim-support-vscodevim
    // Cannot be added to package.json because keybinding replacements
    {
        "key": "g g",
        "command": "cursorTop",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "g r",
        "command": "magit.refresh",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },

	{
		"key": "tab",
		"command": "extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
	},
	{
		"key": "tab",
		"command": "-extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
	},
	{
		"key": "x",
		"command": "magit.discard-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "k",
		"command": "-magit.discard-at-point"
	},
	{
		"key": "-",
		"command": "magit.reverse-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "v",
		"command": "-magit.reverse-at-point"
	},
	{
		"key": "shift+-",
		"command": "magit.reverting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+v",
		"command": "-magit.reverting"
	},
	{
		"key": "shift+o",
		"command": "magit.resetting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+x",
		"command": "-magit.resetting"
	},
	{
		"key": "x",
		"command": "-magit.reset-mixed"
	},
	{
		"key": "ctrl+u x",
		"command": "-magit.reset-hard"
	},
    // Extra ref menu support for edamagit with the key "y"
    // Cannot be added to package.json because keybinding replacements
	{
		"key": "y",
		"command": "-magit.show-refs"
	},
	{
		"key": "y",
		"command": "vspacecode.showMagitRefMenu",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
	},

    // Easy navigation in quick open/QuickPick
	{
		"key": "ctrl+j",
		"command": "workbench.action.quickOpenSelectNext",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.quickOpenSelectPrevious",
		"when": "inQuickOpen"
	},

    // Easy navigation in sugesstion/intellisense
    // Cannot be added to package.json because of conflict with vim's default bindings
	{
		"key": "ctrl+j",
		"command": "selectNextSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+k",
		"command": "selectPrevSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+l",
		"command": "acceptSelectedSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},

    // Easy navigation in parameter hint (i.e. traverse the hints when there's multiple overload for one method)
    // Cannot be added to package.json because of conflict with vim's default bindings
	{
		"key": "ctrl+j",
		"command": "showNextParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+k",
		"command": "showPrevParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},

    // Add ctrl+h/l to navigate in file browser
	{
		"key": "ctrl+h",
		"command": "file-browser.stepOut",
		"when": "inFileBrowser"
	},
	{
		"key": "ctrl+l",
		"command": "file-browser.stepIn",
		"when": "inFileBrowser"
	},

    // Rebind action menu for file-browser
    // File browser, which is bound to <spc> f f by default, binds ctrl+a to open an action menu; however, ctrl+a can be used move the text cursor to the front.
    // Your can merge the following example keybindings to keybindings.json to use ctrl+o instead of ctrl+a in the file browser to open an action menu.
    {
        "key": "ctrl+a",
        "command": "-file-browser.actions",
        "when": "inFileBrowser"
    },

    {
        "key": "ctrl+o",
        "command": "file-browser.actions",
        "when": "inFileBrowser"
    },

    // from The-Compiler-dotfiles-vscode/vscode/keybindings.jsonc
    // unfocus helpers
    // {
    //     "key": "shift+escape",
    //     "command": "workbench.action.focusActiveEditorGroup",
    //     "when": "terminalFocus"
    // },
    // {
    //     // for search input
    //     "key": "escape",
    //     "command": "search.action.focusSearchList",
    //     "when": "inputFocus && searchViewletFocus"
    // },
    // {
    //     // for scm input box
    //     "key": "escape",
    //     "command": "workbench.scm.focus",
    //     "when": "inputFocus && focusedView == 'workbench.scm'"
	// },
	// {
	// 	"key": "ctrl+j",
	// 	"command": "selectNextCodeAction",
	// 	"when": "codeActionMenuVisible"
	// },
	// {
	// 	"key": "ctrl+k",
	// 	"command": "selectPrevCodeAction",
	// 	"when": "codeActionMenuVisible"
	// },
	// {
	// 	"key": "ctrl+l",
	// 	"command": "acceptSelectedCodeAction",
	// 	"when": "codeActionMenuVisible"
	// },

    // https://github.com/microsoft/vscode/issues/27342
    // { "key": "ctrl+e", "command": "-workbench.action.quickOpen" }

    // Quick Window Navigation (Alt, Ctrl)
    {
        "key": "Alt+h",
        "command": "workbench.action.navigateLeft",
        "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && !isInDiffEditor"
    },
    {
        "key": "Alt+j",
        "command": "workbench.action.navigateDown",
        "when": "!codeActionMenuVisible && !inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "Alt+k",
        "command": "workbench.action.navigateUp",
        "when": "!codeActionMenuVisible && !inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "Alt+l",
        "command": "workbench.action.navigateRight",
        "when": "!codeActionMenuVisible && !inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && !isInDiffEditor"
    },

    {
        "key": "Ctrl+h",
        "command": "workbench.action.navigateLeft",
        "when": "!inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && !isInDiffEditor"
    },
    {
        "key": "Ctrl+j",
        "command": "workbench.action.navigateDown",
        "when": "!codeActionMenuVisible && !inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "Ctrl+k",
        "command": "workbench.action.navigateUp",
        "when": "!codeActionMenuVisible && !inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "Ctrl+l",
        "command": "workbench.action.navigateRight",
        "when": "!codeActionMenuVisible && !inQuickOpen && !suggestWidgetVisible && !parameterHintsVisible && !isInDiffEditor"
    },

    // Quick Navigation for diff view (Alt, Ctrl)
    {
        "key": "Alt+h",
        "command": "workbench.action.compareEditor.focusSecondarySide",
        "when": "isInDiffEditor && !isInDiffLeftEditor"
    },
    {
        "key": "Alt+h",
        "command": "workbench.action.navigateLeft",
        "when": "isInDiffEditor && isInDiffLeftEditor"
    },
    {
        "key": "Alt+l",
        "command": "workbench.action.compareEditor.focusPrimarySide",
        "when": "isInDiffEditor && isInDiffLeftEditor"
    },
    {
        "key": "Alt+l",
        "command": "workbench.action.navigateRight",
        "when": "isInDiffEditor && !isInDiffLeftEditor"
    },
    {
        "key": "Ctrl+h",
        "command": "workbench.action.compareEditor.focusSecondarySide",
        "when": "isInDiffEditor && !isInDiffLeftEditor"
    },
    {
        "key": "Ctrl+h",
        "command": "workbench.action.navigateLeft",
        "when": "isInDiffEditor && isInDiffLeftEditor"
    },
    {
        "key": "Ctrl+l",
        "command": "workbench.action.compareEditor.focusPrimarySide",
        "when": "isInDiffEditor && isInDiffLeftEditor"
    },
    {
        "key": "Ctrl+l",
        "command": "workbench.action.navigateRight",
        "when": "isInDiffEditor && !isInDiffLeftEditor"
    },
    {
        "key": "shift+enter",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\\\r\n"
        },
        "when": "terminalFocus"
    }
]
